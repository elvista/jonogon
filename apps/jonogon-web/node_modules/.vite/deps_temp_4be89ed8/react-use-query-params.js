import {
  require_react
} from "./chunk-ACDOY5PO.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// ../../node_modules/.pnpm/react-use-query-params@2.1.0_react@18.3.1/node_modules/react-use-query-params/dist/useQueryParams.js
var import_react = __toESM(require_react(), 1);
var listeners = /* @__PURE__ */ new Set();
function runListeners() {
  listeners.forEach((listener) => {
    listener();
  });
}
(function(history) {
  function intercept(func) {
    return function(...args) {
      const returnedValue = func.apply(history, args);
      runListeners();
      return returnedValue;
    };
  }
  history.pushState = intercept(history.pushState);
  history.replaceState = intercept(history.replaceState);
  window.addEventListener("popstate", () => {
    runListeners();
  });
})(window.history);
function applyQueryParams(target, queryParams, removeExtras = false) {
  const params = target instanceof URL ? target.searchParams : target;
  if (removeExtras) {
    params.forEach((value, key) => {
      if (!(key in queryParams)) {
        params.delete(key);
      }
    });
  }
  for (const [key, values] of Object.entries(queryParams)) {
    const usableValues = Array.isArray(values) ? values : [values];
    params.delete(key);
    for (const value of usableValues) {
      params.append(key, value !== null && value !== void 0 ? value : "");
    }
  }
  return target;
}
function useQueryParams() {
  const currentLocation = window.location.href;
  const urlSearchParams = (0, import_react.useMemo)(() => {
    return new URLSearchParams(window.location.search);
  }, [currentLocation]);
  const watching = (0, import_react.useRef)({});
  const watchingLength = (0, import_react.useRef)(false);
  const pauseWatch = (0, import_react.useRef)(false);
  const watch = (0, import_react.useCallback)((key) => {
    if (key in watching.current || pauseWatch.current || watchingLength.current) {
      return;
    }
    watching.current[key] = urlSearchParams.getAll(String(key));
  }, [urlSearchParams, watching]);
  const clearWatch = (0, import_react.useCallback)(() => {
    watching.current = {};
    watchingLength.current = false;
  }, [watching]);
  const [, increment] = (0, import_react.useReducer)((state) => {
    return state + 1;
  }, 0);
  const rerender = (0, import_react.useCallback)(() => {
    increment();
  }, [increment]);
  const handle = (0, import_react.useCallback)(() => {
    const currentParams = new URLSearchParams(window.location.search);
    let shouldRerender = false;
    let length = 0;
    for (const [key, values] of Object.entries(watching.current)) {
      const currentValues = currentParams.getAll(key);
      if (currentValues.length !== (values === null || values === void 0 ? void 0 : values.length)) {
        shouldRerender = true;
        break;
      }
      for (let i = 0; i < currentValues.length; i++) {
        if (currentValues[i] !== values[i]) {
          shouldRerender = true;
          break;
        }
      }
      length += 1;
    }
    shouldRerender = shouldRerender || watchingLength.current !== false && watchingLength.current !== length;
    if (shouldRerender) {
      clearWatch();
      rerender();
      return;
    }
  }, [watching, clearWatch, rerender]);
  (0, import_react.useEffect)(() => {
    listeners.add(handle);
    return () => {
      listeners.delete(handle);
    };
  }, [handle]);
  const params = (0, import_react.useMemo)(() => {
    return new Proxy({}, {
      get(target, key) {
        watch(key);
        return urlSearchParams.getAll(key);
      },
      ownKeys(target) {
        const keys = /* @__PURE__ */ new Set();
        urlSearchParams.forEach((value, key) => {
          keys.add(key);
        });
        if (!pauseWatch.current) {
          watchingLength.current = keys.size;
        }
        return [...keys];
      },
      getOwnPropertyDescriptor(target, prop) {
        return { configurable: true, enumerable: true, writable: false };
      },
      has(target, key) {
        watch(key);
        return urlSearchParams.has(key);
      }
    });
  }, [urlSearchParams]);
  const setParams = (0, import_react.useCallback)((nextParams, replace = false) => {
    try {
      const nextURL = new URL(window.location.href);
      pauseWatch.current = true;
      const nextParamsObject = nextParams instanceof Function ? nextParams(params) : nextParams;
      pauseWatch.current = false;
      applyQueryParams(nextURL, nextParamsObject, true);
      if (replace) {
        window.history.replaceState(null, "", nextURL);
      } else {
        window.history.pushState(null, "", nextURL);
      }
    } catch (error) {
      console.error("Error while setting query params", error);
    }
    pauseWatch.current = false;
  }, [params]);
  return [params, setParams];
}

// ../../node_modules/.pnpm/react-use-query-params@2.1.0_react@18.3.1/node_modules/react-use-query-params/dist/index.js
var dist_default = useQueryParams;
export {
  dist_default as default,
  useQueryParams
};
//# sourceMappingURL=react-use-query-params.js.map
