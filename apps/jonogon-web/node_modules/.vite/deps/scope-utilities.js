import "./chunk-DC5AMYBS.js";

// ../../node_modules/.pnpm/scope-utilities@1.2.2/node_modules/scope-utilities/dist/index.mjs
function scope(object) {
  function letFunc(func) {
    return func(object);
  }
  function withFunc(func) {
    const boundFunction = func.bind(object);
    return boundFunction();
  }
  function runFunc(func) {
    const boundFunction = func.bind(object);
    return boundFunction();
  }
  function applyFunc(func) {
    const result = func.bind(object)();
    if (result instanceof Promise) {
      return new Promise((accept, reject) => {
        result.then(() => {
          accept(object);
        }).catch(reject);
      });
    } else {
      return object;
    }
  }
  function alsoFunc(func) {
    const result = func(object);
    if (result instanceof Promise) {
      return new Promise((accept, reject) => {
        result.then(() => {
          accept(object);
        }).catch(reject);
      });
    } else {
      return object;
    }
  }
  function takeIfFunc(func) {
    const result = func(object);
    if (result instanceof Promise) {
      return new Promise((accept, reject) => {
        result.then((pass) => {
          if (pass) {
            accept(object);
          } else {
            accept(null);
          }
        }).catch(reject);
      });
    } else {
      return result ? object : null;
    }
  }
  function takeUnlessFunc(func) {
    const result = func(object);
    if (result instanceof Promise) {
      return new Promise((accept, reject) => {
        result.then((pass) => {
          if (pass) {
            accept(null);
          } else {
            accept(object);
          }
        }).catch(reject);
      });
    } else {
      return result ? null : object;
    }
  }
  return {
    let: letFunc,
    letFunc,
    with: withFunc,
    withFunc,
    run: runFunc,
    runFunc,
    apply: applyFunc,
    applyFunc,
    also: alsoFunc,
    alsoFunc,
    takeIf: takeIfFunc,
    takeIfFunc,
    takeUnless: takeUnlessFunc,
    takeUnlessFunc
  };
}
function run(func) {
  return func();
}
function returnOf(func) {
  return func();
}
export {
  returnOf,
  run,
  scope
};
//# sourceMappingURL=scope-utilities.js.map
