{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/react-use-query-params@2.1.0_react@18.3.1/node_modules/react-use-query-params/dist/useQueryParams.ts", "../../../../../node_modules/.pnpm/react-use-query-params@2.1.0_react@18.3.1/node_modules/react-use-query-params/dist/index.ts"],
  "sourcesContent": ["import {useCallback, useEffect, useMemo, useReducer, useRef} from 'react';\n\nconst listeners = new Set<() => void>();\n\nfunction runListeners() {\n    listeners.forEach((listener) => {\n        listener();\n    });\n}\n\n(function (history) {\n    function intercept(func: any) {\n        return function (...args: any[]) {\n            const returnedValue = func.apply(history, args);\n            runListeners();\n\n            return returnedValue;\n        };\n    }\n\n    history.pushState = intercept(history.pushState);\n    history.replaceState = intercept(history.replaceState);\n\n    // to handle browser's native backward and forward functionality\n    window.addEventListener('popstate', () => {\n        runListeners();\n    });\n})(window.history);\n\nexport type TDefaultParamsObject = Record<string, any>;\n\nexport type TAllParams<PARAMS extends TDefaultParamsObject> = {\n    [key in keyof PARAMS]: string[];\n};\n\nexport function applyQueryParams<PARAMS extends TDefaultParamsObject>(\n    target: URL | URLSearchParams,\n    queryParams: Partial<TAllParams<PARAMS>>,\n    removeExtras: boolean = false,\n) {\n    const params = target instanceof URL ? target.searchParams : target;\n\n    if (removeExtras) {\n        params.forEach((value, key) => {\n            if (!(key in queryParams)) {\n                params.delete(key);\n            }\n        });\n    }\n\n    for (const [key, values] of Object.entries(queryParams)) {\n        const usableValues = Array.isArray(values) ? values : [values];\n        params.delete(key);\n\n        for (const value of usableValues) {\n            params.append(key, value ?? '');\n        }\n    }\n\n    return target;\n}\n\nexport function useQueryParams<\n    PARAMS extends TDefaultParamsObject = TDefaultParamsObject,\n>() {\n    const currentLocation = window.location.href;\n\n    const urlSearchParams = useMemo(() => {\n        return new URLSearchParams(window.location.search);\n    }, [currentLocation]);\n\n    const watching = useRef<{\n        [key in keyof PARAMS]?: string[];\n    }>({});\n\n    const watchingLength = useRef<number | boolean>(false);\n    const pauseWatch = useRef<boolean>(false);\n\n    // stores both the key and the values as an array\n    // of the params that are being watched\n    const watch = useCallback(\n        (key: keyof PARAMS) => {\n            if (\n                key in watching.current ||\n                pauseWatch.current ||\n                watchingLength.current\n            ) {\n                return;\n            }\n\n            watching.current[key] = urlSearchParams.getAll(String(key));\n        },\n        [urlSearchParams, watching],\n    );\n\n    const clearWatch = useCallback(() => {\n        watching.current = {};\n        watchingLength.current = false;\n    }, [watching]);\n\n    // React's officially recommended way of forcing a rerender\n    const [, increment] = useReducer((state) => {\n        return state + 1;\n    }, 0);\n\n    const rerender = useCallback(() => {\n        increment();\n    }, [increment]);\n\n    // Handles location changes via listener mechanism above.\n    const handle = useCallback(() => {\n        const currentParams = new URLSearchParams(window.location.search);\n\n        let shouldRerender = false;\n        let length = 0;\n\n        for (const [key, values] of Object.entries(watching.current)) {\n            const currentValues = currentParams.getAll(key);\n\n            if (currentValues.length !== values?.length) {\n                shouldRerender = true;\n                break;\n            }\n\n            // the first mismatched value means we need to rerender\n            for (let i = 0; i < currentValues.length; i++) {\n                if (currentValues[i] !== values[i]) {\n                    shouldRerender = true;\n                    break;\n                }\n            }\n\n            length += 1;\n        }\n\n        shouldRerender =\n            shouldRerender ||\n            (watchingLength.current !== false &&\n                watchingLength.current !== length);\n\n        if (shouldRerender) {\n            clearWatch();\n            rerender();\n            return;\n        }\n    }, [watching, clearWatch, rerender]);\n\n    useEffect(() => {\n        // listening on the global window object\n        // via interceptions and listeners.\n        listeners.add(handle);\n\n        return () => {\n            listeners.delete(handle);\n        };\n    }, [handle]);\n\n    const params = useMemo(() => {\n        return new Proxy({} as TAllParams<PARAMS>, {\n            get(target, key: string): string[] {\n                watch(key);\n                return urlSearchParams.getAll(key);\n            },\n            ownKeys(target) {\n                const keys = new Set<string>();\n\n                urlSearchParams.forEach((value, key) => {\n                    keys.add(key);\n                });\n\n                if (!pauseWatch.current) {\n                    watchingLength.current = keys.size;\n                }\n\n                return [...keys];\n            },\n            getOwnPropertyDescriptor(target, prop) {\n                return {configurable: true, enumerable: true, writable: false};\n            },\n            has(target, key: string) {\n                watch(key);\n                return urlSearchParams.has(key);\n            },\n        });\n    }, [urlSearchParams]);\n\n    const setParams = useCallback(\n        (\n            nextParams:\n                | TAllParams<PARAMS>\n                | ((\n                      current: TAllParams<PARAMS>,\n                  ) => Partial<TAllParams<PARAMS>>),\n            replace: boolean = false,\n        ) => {\n            try {\n                const nextURL = new URL(window.location.href);\n\n                pauseWatch.current = true;\n\n                const nextParamsObject =\n                    nextParams instanceof Function\n                        ? nextParams(params)\n                        : nextParams;\n\n                pauseWatch.current = false;\n\n                applyQueryParams(nextURL, nextParamsObject, true);\n\n                if (replace) {\n                    window.history.replaceState(null, '', nextURL);\n                } else {\n                    window.history.pushState(null, '', nextURL);\n                }\n            } catch (error) {\n                console.error('Error while setting query params', error);\n            }\n\n            pauseWatch.current = false;\n        },\n        [params],\n    );\n\n    return [params, setParams] as const;\n}\n", "export {\n    useQueryParams,\n    //\n    type TDefaultParamsObject,\n    type TAllParams,\n} from './useQueryParams';\n\nimport {useQueryParams} from './useQueryParams';\nexport default useQueryParams;\n"],
  "mappings": "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",
  "names": []
}
